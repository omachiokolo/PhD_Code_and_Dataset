# -*- coding: utf-8 -*-
"""1. ProjectExperiment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1q3l2H2qI_phzw3ItKoN4oXyedgOGRNe0
"""



"""# **Importing Libraries**"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import OneHotEncoder
from sklearn.preprocessing import LabelEncoder

pd.set_option('display.max_columns', None)

# mount Google Drive
from google.colab import drive
drive.mount('/content/gdrive')

datapath = "/content/gdrive/MyDrive/Hospital_Inpatient_Discharges_Dataset.csv"
df = pd.read_csv(datapath)

"""# **Exploratory Data Analysis**"""

df.head()

df.shape    # Check the dataset dimension

df.info()

df.columns

df.describe()

Categorical = df.dtypes[df.dtypes =='object'].index
print(Categorical)
#df[Categorical].describe()

df["Hospital_Service_Area"].value_counts()

df["Hospital_County"].value_counts()

df["Discharge_Year"].value_counts()

df["Facility_Name"].value_counts()

df["Age_Group"].describe()

df['Age_Group'].value_counts()

df['Gender'].value_counts()

df['Race'].value_counts()

df['Ethnicity'].value_counts()

df['Length_of_Stay'].value_counts()

df['Type_of_Admission'].value_counts()

df['Patient_Disposition'].value_counts()

df["CCSR Diagnosis Code"].value_counts()

(df.to_markdown)
df['CCSR_Diagnosis_Description'].value_counts()

df['CCSR_Procedure_Description'].value_counts()

df['APR_DRG_Description'].value_counts()

df['APR_MDC_Description'].value_counts()

df['APR_Severity_of_Illness_Code'].value_counts()

df['APR_Severity_of_Illness_Description'].value_counts()

df['APR_Risk_of_Mortality'].value_counts()

"""# **Data Cleaning**"""

print('Shape before deleting duplicate values:', df.shape)

# Removing duplicate rows if any
df = df.drop_duplicates()
print('Shape After deleting duplicate values:', df.shape)

df.isnull().sum()

Categorical = df.dtypes[df.dtypes =='object'].index
print(Categorical)

"""**Treating missing values of categorical variable with MODE value**"""

# Treating missing values of categorical variable with MODE value
df['Zip_Code'].fillna(value=df['Zip_Code'].mode()[0], inplace=True)
df['Gender'].fillna(value=df['Gender'].mode()[0], inplace=True)
df['Race'].fillna(value=df['Race'].mode()[0], inplace=True)
df['Ethnicity'].fillna(value=df['Ethnicity'].mode()[0], inplace=True)
df['Length_of_Stay'].fillna(value=df['Length_of_Stay'].mode()[0], inplace=True)
df['Type_of_Admission'].fillna(value=df['Type_of_Admission'].mode()[0], inplace=True)
df['Patient_Disposition'].fillna(value=df['Patient_Disposition'].mode()[0], inplace=True)
df['CCSR Diagnosis Code'].fillna(value=df['CCSR Diagnosis Code'].mode()[0], inplace=True)
df['CCSR_Diagnosis_Description'].fillna(value=df['CCSR_Diagnosis_Description'].mode()[0], inplace=True)
df['CCSR_Procedure_Code'].fillna(value=df['CCSR_Procedure_Code'].mode()[0], inplace=True)
df['CCSR_Procedure_Description'].fillna(value=df['CCSR_Procedure_Description'].mode()[0], inplace=True)
df['Payment_Typology_1'].fillna(value=df['Payment_Typology_1'].mode()[0], inplace=True)
df['Payment_Typology_2'].fillna(value=df['Payment_Typology_2'].mode()[0], inplace=True)
df['Payment_Typology_3'].fillna(value=df['Payment_Typology_3'].mode()[0], inplace=True)
df['Birth_Weight'].fillna(value=df['Birth_Weight'].mode()[0], inplace=True)

df.isnull().sum()

"""**Treating missing values of continuous variable with Median value**"""

# Treating missing values of continuous variable with Median value
#dataframe['Weight'].fillna(value=dataframe['Weight'].median(), inplace=True)
#dataframe['Age'].fillna(value=dataframe['Age'].median(), inplace=True)

df = df.dropna()

df.isnull().sum()

df.shape

df.head()

"""**Featuure Engineering**"""

df.Patient_Disposition[df.Patient_Disposition != 'Expired'] = 'Survived'
df.Patient_Disposition[df.Patient_Disposition == 'Expired'] = 'Died'

df['Survival_rate'] = df['Patient_Disposition']

"""# Selecting a subset of the dataset for analysis"""

batch_1 = df[:15000]

batch_1.head()



batch_1data1 = batch_1[["Hospital_Service_Area", "Hospital_County", "Operating_Certificate_Number", "Permanent_Facility_Id", "Facility_Name", "Age_Group", "Zip_Code", "Gender", "Race", "Ethnicity", "Length_of_Stay", "Type_of_Admission", "Discharge_Year", "CCSR Diagnosis Code", "CCSR_Diagnosis_Description", "CCSR_Procedure_Code", "CCSR_Procedure_Description", "APR_DRG_Code", "APR_DRG_Description", "APR_MDC_Code", "APR_MDC_Description", "APR_Severity_of_Illness_Code", "APR_Severity_of_Illness_Description", "APR_Risk_of_Mortality", "APR_Medical_Surgical_Description", "Payment_Typology_1", "Payment_Typology_2", "Payment_Typology_3", "Birth_Weight", "Emergency_Department_Indicator", "Total_Charges", "Total_Costs", "Survival_rate"]]

batch_1data1.to_csv("UnCausalBERTdata.csv")

batch_1data = batch_1[["APR_MDC_Description", "Gender", 	"Age_Group", 	"APR_Severity_of_Illness_Description", 	"APR_Risk_of_Mortality",	"CCSR_Procedure_Description", "Survival_rate"]]

batch_1data.size

batch_1data.head()

"""# **Saving the selected clincial text to a file for BERT Prediction**"""

batch_1data.to_csv("newdataset_BERT.csv")

"""# Converting from Categorical to Numeric"""

le = LabelEncoder()
batch_1data['APR_MDC_Description'] = le.fit_transform(batch_1data['APR_MDC_Description'])
batch_1data['Gender'] = le.fit_transform(batch_1data['Gender'])
batch_1data['Age_Group'] = le.fit_transform(batch_1data['Age_Group'])
batch_1data['APR_Severity_of_Illness_Description'] = le.fit_transform(batch_1data['APR_Severity_of_Illness_Description'])
batch_1data['APR_Risk_of_Mortality'] = le.fit_transform(batch_1data['APR_Risk_of_Mortality'])
batch_1data['CCSR_Procedure_Description'] = le.fit_transform(batch_1data['CCSR_Procedure_Description'])
batch_1data['Survival_rate'] = le.fit_transform(batch_1data['Survival_rate'])

batch_1data.head()

batch_1data.to_csv("newdataset_D.csv")

"""**Installing sql for pndas dataframe to select a specific disease dataset (Heart Disease)**"""

# install sql for
!pip install sqldf

import sqldf as sql

newdf = sql.run("""
SELECT CCSR_Diagnosis_Description, Gender, Age_Group, APR_Severity_of_Illness_Description, APR_Risk_of_Mortality, CCSR_Procedure_Description, Survival_rate
FROM df
WHERE CCSR_Diagnosis_Description = 'Heart failure'
 """)

newdf.head()

newdf['Survival_rate'].value_counts()

newdf.size

newdf.to_csv("newdataset_HF.csv")

"""**Converting from Categorical to Numeric**"""

le = LabelEncoder()
newdf['APR_MDC_Description'] = le.fit_transform(newdf['APR_MDC_Description'])
newdf['Gender'] = le.fit_transform(newdf['Gender'])
newdf['Age_Group'] = le.fit_transform(newdf['Age_Group'])
newdf['APR_Severity_of_Illness_Description'] = le.fit_transform(newdf['APR_Severity_of_Illness_Description'])
newdf['APR_Risk_of_Mortality'] = le.fit_transform(newdf['APR_Risk_of_Mortality'])
newdf['CCSR_Procedure_Description'] = le.fit_transform(newdf['CCSR_Procedure_Description'])
newdf['Survival_rate'] = le.fit_transform(newdf['Survival_rate'])

newdf.loc[0:4,['APR_MDC_Description', 'Gender', 'Age_Group', 'APR_Severity_of_Illness_Description', 'APR_Risk_of_Mortality', 'CCSR_Procedure_Description', 'Survival_rate']]

newdf['Age_Group'].value_counts()

newdf.to_csv("newdataset_HD.csv")

import matplotlib.pyplot as plt

# Visualizing for all variable with histogram
plt.figure()
column = categorical_columns.column # creating histogram to visualize the variables
for col in column:
    print('col: ', col)
    categorical_columns[col].hist()
    plt.show()

!pip install sqldf

import sqldf as sql
from sklearn.preprocessing import OneHotEncoder

